# This Action should run on each PR by verifying if they pass on lint, test and build
name: CI

on:
  push:
    branches-ignore:
      - main

jobs:
  build:
    name: FastStore
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.5

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: pnpm i

      - name: Build
        run: pnpm build

      # - name: Size
      #   run: pnpm size

      # - name: Lint
      #   run: pnpm lint

      # - name: Test
      #   run: pnpm test

      # - name: Publish to Chromatic
      #   uses: chromaui/action@latest
      #   with:
      #     projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      #     workingDir: packages/storybook
      #     buildScriptName: build
      #     onlyChanged: true
      #     exitOnceUploaded: true
      #     exitZeroOnChanges: true

      - name: Pack packages
        run: |
          mkdir -p packed-packages
          for package in packages/*; do
            TIMESTAMP=$(date +%s)

            if [ -d "$package" ]; then
              if NPM_PACK_RESULT=$(cd "$package" && npm pack --pack-destination ../../packed-packages); then
                # Extract filename without extension
                FILENAME=$(echo "$NPM_PACK_RESULT" | sed 's/\.tgz$//')

                # Avoid having packed package with the same published package version
                PACKED_PACKAGE="$FILENAME-ci-$TIMESTAMP.tgz"

                # Rename packed package file
                mv "./packed-packages/$NPM_PACK_RESULT" "./packed-packages/$PACKED_PACKAGE"
              fi
            fi
          done

      - name: Clone starter
        run: git clone https://github.com/vtex-sites/starter.store.git starter

      - name: Install specific Yarn version
        run: npm install -g yarn@1.22.19 # https://github.com/yarnpkg/yarn/issues/9015

      - name: Verify Yarn version
        run: yarn --version

      - name: Install dependencies in starter
        run: |
          cd starter
          yarn install

      - name: Install the packages on starter
        run: |
          cd starter
          for package in ../packed-packages/*.tgz; do
            yarn add "$package"
          done

      - name: Build starter
        run: |
          cd starter
          yarn build


/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
  ID: string
}

// Operation related types
export type TopSearchesSuggestionsQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type TopSearchesSuggestionsQueryQuery = { vtex: { topSearches: Maybe<{ searches: Maybe<Array<Maybe<{ term: string }>>> }> } };


// Query Related Code

export const TopSearchesSuggestionsQuery = {
  query: process.env.NODE_ENV === 'production' ? undefined : "query TopSearchesSuggestionsQuery {\n  vtex {\n    topSearches {\n      searches {\n        term\n      }\n    }\n  }\n}\n",
  sha256Hash: "adc8a8b3e4ac80efb45d2a47d9e89d12c1dc602b7a7c19c069e6d09b1f76b28b",
  operationName: "TopSearchesSuggestionsQuery",
}


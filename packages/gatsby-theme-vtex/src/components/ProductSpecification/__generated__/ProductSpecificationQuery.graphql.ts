/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
}

// Operation related types
export type ProductSpecificationQueryQueryVariables = Exact<{
  slug: Maybe<Scalars['String']>
}>

export type ProductSpecificationQueryQuery = {
  vtex: {
    product: Maybe<{
      specificationGroups: Maybe<
        Array<
          Maybe<{
            name: Maybe<string>
            specifications: Maybe<
              Array<
                Maybe<{
                  name: Maybe<string>
                  values: Maybe<Array<Maybe<string>>>
                }>
              >
            >
          }>
        >
      >
    }>
  }
}

// Query Related Code

export const ProductSpecificationQuery = {
  query:
    'query ProductSpecificationQuery($slug: String) {\n  vtex {\n    product(slug: $slug) {\n      specificationGroups {\n        name\n        specifications {\n          name\n          values\n        }\n      }\n    }\n  }\n}\n',
  sha256Hash:
    '3ad8c09c11e825e8297969b23f9f3f731e938cbe2a2c9e4ac700f4e215926294',
  operationName: 'ProductSpecificationQuery',
}
